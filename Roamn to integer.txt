Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.




class Solution:
    def romanToInt(self, s: str) -> int:
        roman = {'I':1, 'V':5, 'X':10,'L':50, 'C':100, 'D':500, 'M':1000, 'IV':4, 'IX':9, 'XL':40, 'XC':90, 'CD':400, 'CM':900} # defining dictionalry which can be referred to later
        i=0 # initializing values
        num=0
        while i < len(s): # as long as i is less than length of text input
            if i+1<len(s) and s[i:i+2] in roman: # checking 2 consecutive text letters at a time - if they are in the dictionary. that is why we have to see is i+1 < length of text (because last letter will not have a 2nd consecutive letter after it)
                num += roman[s[i:i+2]] # refer to dictionary and add the value associated with text to the variable 'num'
                i += 2 # move to next two letters
            else: # if two consecutive letters are not in dictionary - we look at individual letters one at a time
                num += roman[s[i]] # refer dict and add associated value to num
                i += 1 # move to next letter - note that in next loop, first the while loop will test for next 2 consecutive letters and if it cant find it in dict, then it will look for individual letters
        return num # returns the answer - the total stored in variable num